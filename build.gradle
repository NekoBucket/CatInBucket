buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
    }
}

// plugins of gradle
plugins {
    id "java-library"
    id "scala"
    id "idea"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// set metadata
version = "${project.mc_version}-${project.mod_version}".toString()
group = "${project.group_name}.${project.mod_id}".toString()
archivesBaseName = "${project.mod_id}"

println "Starting build of ${archivesBaseName}, Version: ${project.mc_version}"
println "Group: ${group}"
println "Using Forge: ${project.forge_version}, for Minecraft: ${project.mc_version}"

// set to target Java 17
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

idea {
    targetVersion = "17"
    module {
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

javadoc {
    options.encoding = 'UTF-8'
}

// add scala compile options
tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-Ylog-classpath"]
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') +
        '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // Use official mapping due to
    // https://mcforge.readthedocs.io/en/1.16.x/gettingstarted/#migration-to-mojangs-official-mappings
    mappings channel: "$project.mapping_channel", version: project.mapping_version
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                catinbucket {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                catinbucket {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            forceExit false
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                catinbucket {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}
sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []


configurations {
    implementation.extendsFrom(shadow)
}

minecraft.runs.all {
    lazyToken("minecraft_classpath") {
        configurations.shadow.copyRecursive().resolve().collect {it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    // SLP
    maven {
        name = "Azure-SLP"
        url = "https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1"
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            it.includeModule("com.kotori316", "ScalableCatsForce-MixIn".toLowerCase())
            it.includeModule("org.typelevel", "cats-core_2.13")
            it.includeModule("org.typelevel", "cats-kernel_2.13")
        }
    }

    // curse forge
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"

        content {
            it.includeGroup("curse.maven")
        }
    }

    mavenCentral()
}

dependencies {
    minecraft("net.minecraftforge:forge:${project.mc_version}-${project.forge_version}")
    compileOnly(group: "org.scala-lang", name: "scala-library", version: project.scala_version)
    runtimeOnly(group: 'com.kotori316', name: 'ScalableCatsForce'.toLowerCase(Locale.ROOT), version: project.slp_version, classifier: 'with-library') {
        transitive(false)
    }

//    shadow(group: "space.controlnet", name: "lightioc_2.13", version: "0.3.0") {
//        transitive(false)
//    }
}

// Example for how to get properties into the manifest for reading by the runtime..
// TODO not tested
jar {
    manifest.attributes([
            "Specification-Title"     : project.mod_title,
            "Specification-Vendor"    : project.vender_name,
            "Specification-Version"   : project.mod_version,
            "Implementation-Title"    : project.mod_title,
            "Implementation-Version"  : project.mod_version,
            "Implementation-Vendor"   : project.vender_name,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])

    from {
        configurations.shadow.collect { file -> file.isDirectory() ? file : zipTree(file) }
    }

}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to re-obfuscate your jar file
jar.finalizedBy('reobfJar')
